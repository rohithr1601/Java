John wick have a ability to melt metals just by touching them , he has n types of metals which have some numbers written on them (numbers are from 0 to 99).

He wants to mix all these metals together by melting and form a new metal. At each step, he is going to take two metals that stand next to each other and melt them together, and put the resulting metal in their place.

When mixing two metals of value a and b, the resulting metal will have the value (a + b) mod 100.

Also, there will be some loss of his power whenever he uses it. When melting two metals a and b then the the value of loss will be (a * b).

Find out what is the minimum value of loss that John wick can have when melting all the metals together.



Input Format :

First line of input will contain one integer t - number of test cases.

First line of each test case will contain n, the number of metals, 1 <= n <= 100.

The second line of each test case will contain n integers between 0 and 99 - the initial values of the metals.



Output Format :

For each test case output the minimum value of loss.



Sample Input 1:

1

2

18 19



Sample Output 1:

342



Sample Input 2:

1

3

40 60 20



Sample Output 2:

2400



Explanation :

first mix 40 and 60 (smoke: 2400), getting 0, then mix 0 and 20 (smoke: 0); total amount of smoke is 2400
first mix 60 and 20 (smoke: 1200), getting 80, then mix 40 and 80 (smoke: 3200); total amount of smoke is 4400



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Input
1 2 18 19
Output
342
Your output
342


Input
1 3 40 60 20
Output
2400
Your output
2400


Input
1 6 54 17 81 80 42 21
Output
7827
Your output
7827


Input
1 3 32 26 47
Output
3558
Your output
3558



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
public class Main 
{
    public static void main(String[] args) 
	{
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i <t; i++) 
		{
            int n = sc.nextInt();
            int[] a = new int[n];
            for (int j = 0; j < n; j++) 
			{
                a[j] = sc.nextInt();
            }
            int[][] dp = new int[n][n];
            int[][] sum = new int[n][n];
            for (int j = 0; j < n; j++) 
			{
                sum[j][j] = a[j];
            }
            for (int j = 2; j<=n; j++) 
			{
                for (int k = 0; k <= n - j; k++) 
				{
                    int l = k + j- 1;
                    dp[k][l] = Integer.MAX_VALUE;
                    for (int m = k; m < l; m++) 
					{
                        int q = dp[k][m] + dp[m + 1][l] + sum[k][m] * sum[m + 1][l];
                        if (q < dp[k][l]) 
						{
                            dp[k][l] = q;
                            sum[k][l] = (sum[k][m] + sum[m + 1][l]) % 100;
                        }
                    }
                }
            }
            System.out.println(dp[0][n - 1]);
        }
    }
}
