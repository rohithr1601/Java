Question 2

How to Attempt?

Prime Encoder

Given an integer array input1[] and another integer input2,

primeEncoder function returns an integer array by following these two steps:

Step 1: Find the nth prime number, where n=input2.

Step 2. To each element of the input array, add the prime number that is computed in the above step.

Assumptions:

1) All the values of input1 array is >=1 and <=10000,

2) Value of input2 is >=1 and <=100.

Note:

1) Prime number series is 2,3,5,7,11,13...etc

2) 0 and 1 are neither prime nor composite.

Function Prototype: int[] primeEncoder(int input1[], int input2)

Sample Input/Output-1:

input1[] = (1,2,3)

input2 = 2 ouput[] = (4,5,6) Explanation: Given that input2=2, We know that second prime number is 3. Hence, we need to add 3 to every element of the array. That is, (1+3,2+3,3+3) = (4,5,6). Hence, the array (4,5,6) is returned.

Sample Input/Output-2:

input1[] = (10,20,30) input2 = 5 output[] = (21,31,41)


Complete the code use only the 
Sir only the function 



Attempted 1/2

Revisit Later

JAVA7

Compiler: Java 17

12345

5

6

7

8

9

10

11

12

import java.util.*;

// Read only region start

class UserMainCode

{

ut1 and another integer input2.

curns an integer array by following these two steps:

umber, where n=input2.

public int[] primeEncoder(int[] input1, int input2){

// Read only region end

me input array, add the prime number that is computed in

// Write tode here...

throw new UnsupportedOperationException("primeEncoder(int[] input1.

}

is >=1 and <=10000.

13 }

-100.

import java.io.*;

11,13...etc




+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



public int[] primeEncoder(int[] input1, int input2) {
    // Calculate the nth prime number
    int n = input2;
    int count = 0;
    int nthPrime = 0;
    
    for (int i = 2; count <= n; i++) {
        boolean isPrime = true;
        for (int j = 2; j < i; j++) {
            if (i % j == 0) {
                isPrime = false;
                break;
            }
        }
        if (isPrime) {
            nthPrime = i;
            count++;
        }
    }
    
    // Add nth prime number to each element of the input array
    for (int i = 0; i < input1.length; i++) {
        input1[i] += nthPrime;
    }
    
    return input1;
}
