QUESTION 01
bookmark_border
John is passing by a toy shop, suddenly he sees a mega robot but he does not have the amount to buy it , so he goes to the shopkeeper and asked if he can give it to him by any chance, shopkeeper is also smart (shopkeeper is programmer). He gives john one problem and said if you can solve this problem then you can have the mega robot for free.

John is not so good when it comes to programming, so he asked you to help him do it, the problem goes like that :

You have given a tree of n nodes, ith node has a[i] value associated with them for each i from 1 to n. As you all know, a tree of n nodes is a connected graph with n - 1 edges.

You want to delete at least 1 but at most k - 1 edges from the tree so that the following condition holds :

For every connected component calculate the bitwise XOR of the values of the nodes in it. Then, these values have to be the same for all

connected components.



You have to find if it possible to achieve this state?



Input Format :

First line will contain two integers n and k (2 <= k <= n <= 10000) - total numbers of nodes and given value of k respectively.

Second line will contain n space separated integers a1, a2, . . . . an (1 <= a[i] <= 10^5).

Next n - 1 lines will contain two integers ui and vi (means there is an edge between node ui and vi, ui â‰  vi, 1 <= ui, vi <= n).

It is guaranteed that the given graph is a tree.



Output Format :

You should output a single string. If you can delete the edges according to the conditions written above, output "YES" (without quotes). Otherwise, output "NO" (without quotes).



Sample Input 1:

2 2

1 3

1 2



Sample Output 1:

NO



Sample Input 2:

5 5

3 3 3 3 3

1 2

2 3

1 4

4 5



Sample Output 2:

YES



Explanation :

It can be shown that the objection is not achievable for first sample case.

In the second sample case, you can just remove all the edges. There will be 5 connected components, each containing only one node with value 3, so the bitwise XORs will be 3 for all of them.


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
public class Main 
{
    static List<Integer>[] tree;
    static int[] vals;
    static int total = 0;
    static int count = 0;
    static int txor;
    public static void main(String[] args) 
	{
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        vals = new int[n + 1];
        tree = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) 
		{
            vals[i] = sc.nextInt();
            tree[i] = new ArrayList<>();
        }
        for (int i = 0; i < n - 1; i++) 
		{
            int u = sc.nextInt();
            int v = sc.nextInt();
            tree[u].add(v);
            tree[v].add(u);
        }
        for (int i = 1; i <= n; i++) 
		{
            total ^= vals[i];
        }
        if (total == 0) 
		{
            System.out.println("YES");
        } 
		else 
		{
            txor = total;
            dfs(1, -1);
            System.out.println((count > 1 && k > 2) ? "YES" : "NO");
        }
    }
    private static int dfs(int node, int parent) 
	{
        int currXor = vals[node];
        for (int neigh : tree[node]) 
		{
            if (neigh != parent) 
			{
                currXor ^= dfs(neigh, node);
            }
        }
        if (currXor == txor) 
		{
            count++;
            currXor = 0;
        }
        return currXor;
    }
}
