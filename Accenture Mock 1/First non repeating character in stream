First non repeating character in stream
Given a string A of n characters consisting only of lower case alphabets. The task is to find the first non repeating character, each time a character is inserted to the stream. If there is no such character then append '*' to the answer.



Example 1 :



Input : aabc

Output : a*bb

Explanation : For every character first non repeating character is as follow-

"a" - first non-repeating character is 'a'

"aa" - no non-repeating character so '*'

"aab" - first non-repeating character is 'b'

"aabc" - first non-repeating character is 'b'



Example 2 :



Input : zz

Output : z*

Explanation : For every character first non repeating character is as follow-

"z" - first non-repeating character is 'z'

"zz" - no non-repeating character so '*'



Constraints:

1 <= n <= 10^5



+++++++++++++++++++++++++++++++++++++++++++++++++


#include <iostream>
#include <queue>
#include <unordered_map>
using namespace std;
string FirstNonRepeating(string A) 
{
    unordered_map<char, int> freq;
    queue<char> q;
    string result = "";
    for (char ch : A) 
	{
        freq[ch]++;
        q.push(ch);
        while (!q.empty() && freq[q.front()] > 1) 
		{
            q.pop();
        }
        if (q.empty()) 
		{
            result += '*';
        } 
		else 
		{
            result += q.front();
        }
    }
    return result;
}
int main() 
{
    string A;
    cin >> A;
    string result = FirstNonRepeating(A);
    cout <<result << endl;
    return 0;
}
