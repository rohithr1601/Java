Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.



Input format :

This line contains string input.

Output format:

This line contains an integer output.



Example 1:

Input: s = "aab"

Output:

1

Explanation:

The palindrome partitioning ["aa","b"] could be produced using 1 cut.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


#include <iostream>
#include <vector>
#include <climits>
using namespace std;
bool isPalindrome(string s, int start, int end) 
{
    while (start < end) 
    {
        if (s[start] != s[end])
        {
            return false;
        }
        start++;
        end--;
    }
    return true;
}
int minCuts(string s) 
{
    int n = s.length();
    vector<int> cuts(n, 0);
    vector<vector<bool>> palindrome(n, vector<bool>(n, false));
    for (int i = 0; i < n; i++) 
    {
        palindrome[i][i] = true;
    }
    for (int length = 2; length <= n; length++) 
    {
        for (int i = 0; i <= n - length; i++) 
        {
            int j = i + length - 1;
            if (length == 2) 
            {
                palindrome[i][j] = (s[i] == s[j]);
            } 
            else 
            {
                palindrome[i][j] = (s[i] == s[j]) && palindrome[i + 1][j - 1];
            }
        }
    }
    for (int i = 0; i < n; i++) 
     {
        if (palindrome[0][i]) 
        {
            cuts[i] = 0;
        } 
        else 
        {
            cuts[i] = INT_MAX;
            for (int j = 0; j < i; j++) 
            {
                if (palindrome[j + 1][i] && cuts[j] + 1 < cuts[i]) 
                {
                    cuts[i] = cuts[j] + 1;
                }
            }
        }
    }
    return cuts[n - 1];
}
int main() 
{
    string s;
    cin >> s;
    cout << minCuts(s) << endl;
    return 0;
}
 
