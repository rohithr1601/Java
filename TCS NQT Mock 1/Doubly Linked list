Given a doubly linked list, the task is to sort it using merge sort.



Input

First line contains a single integer N - the size of the list.

Next line contains N integers X - the nodes in the list.



Constraints

1 <= N <= 5000

1 <= X <= 10^9



Output

Print the list from both ends after sorting.



Sample Input

5

3 5 1 4 2



Sample Output

1 2 3 4 5

5 4 3 2 1


+++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
class Node {
    int data;
    Node next, prev;

    Node(int data) {
        this.data = data;
        this.next = this.prev = null;
    }
}
public class Main {
    static Node merge(Node left, Node right) {
        if (left == null) return right;
        if (right == null) return left;
        if (left.data < right.data) {
            left.next = merge(left.next, right);
            left.next.prev = left;
            left.prev = null;
            return left;
        } else {
            right.next = merge(left, right.next);
            right.next.prev = right;
            right.prev = null;
            return right;
        }
    }
    static Node split(Node head) {
        if (head == null || head.next == null) return head;

        Node slow = head;
        Node fast = head;

        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        Node secondHalf = slow.next;
        slow.next = null;
        if (secondHalf != null) secondHalf.prev = null;

        return secondHalf;
    }
    static Node mergeSort(Node head) {
        if (head == null || head.next == null) return head;
        Node secondHalf = split(head);
        head = mergeSort(head);
        secondHalf = mergeSort(secondHalf);
        return merge(head, secondHalf);
    }
    static void printHead(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }
    static void printEnd(Node head) {
        if (head == null) return;
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.prev;
        }
        System.out.println();
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        Node head = null, tail = null;
        for (int i = 0; i < N; i++) {
            int value = sc.nextInt();
            Node newNode = new Node(value);
            if (head == null) {
                head = newNode;
                tail = newNode;
            } else {
                tail.next = newNode;
                newNode.prev = tail;
                tail = newNode;
            }
        }
        head = mergeSort(head);
        printHead(head);
        printEnd(head);
    }
}
