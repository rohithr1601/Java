QUESTION 02
bookmark_border
John wick has a big tree on n vertices.

He has assigned two integers lv and rv for each vertex v.

To make wick's tree look even more beautiful Nealon decided to assign a number av(lv <= av <= rv) to each vertex v such that the beauty of the tree is maximized.

Nealon's sense of beauty is different. He defines the beauty of the tree as the sum of |au - av| over all edges(u, v) of the tree.

Nealon can not do it on its own so he need your help. Your task is to find the maximum possible beauty for John wick's tree.



Sample Input :

First line will contain one integer t (1 <= t <= 10)- Number of test cases.

First line of each test case will contain one integer N(2 <= N <= 10^5) - number of vertices in wick's tree.

The ith line of each N line will contain two space separated integer Li and Ri (1 <= Li <= Ri <= 10^6).

Each of the next N - 1 line will contain two integers u and v(1 <= u, v <= n(u ≠ v)) meaning that there is an edge between the vertices u and v in Wick's tree.



It is guaranteed that the given graph is a tree.



It is guaranteed that the sum of N over all test cases doesn't exceed 2⋅10^5.



Sample Output :

For each test case print the maximum possible beauty for Wick's tree.



Sample Input :

3

2

1 6

3 8

1 2

3

1 3

4 6

7 9

1 2

2 3

6

3 14

12 20

12 19

2 12

10 17

3 17

3 2

6 5

1 5

2 6

4 6





Sample Output :

7 8 62

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
public class Main 
{
    static List<Integer>[] adj;
    static int[] l, r;
    static long[][] dp;
    public static void main(String[] args) 
	{
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        StringBuilder result = new StringBuilder();
        while (t-- > 0) 
		{
            int n = sc.nextInt();
            l = new int[n + 1];
            r = new int[n + 1];
            dp = new long[n + 1][2];
            adj = new ArrayList[n + 1];
            for (int i = 1; i <= n; i++) 
			{
                l[i] = sc.nextInt();
                r[i] = sc.nextInt();
                adj[i] = new ArrayList<>();
            }
            for (int i = 0; i < n - 1; i++) 
			{
                int u = sc.nextInt();
                int v = sc.nextInt();
                adj[u].add(v);
                adj[v].add(u);
            }
            dfs(1, -1);
            long maxBeauty = Math.max(dp[1][0], dp[1][1]);
            result.append(maxBeauty).append(" ");
        }
        System.out.println(result.toString().trim());
    }
    static void dfs(int node, int parent) 
	{
        for (int neighbor : adj[node]) 
		{
            if (neighbor != parent) 
			{
                dfs(neighbor, node);
                dp[node][0] += Math.max(
                    dp[neighbor][0] + Math.abs(l[node] - l[neighbor]),
                    dp[neighbor][1] + Math.abs(l[node] - r[neighbor]));
                dp[node][1] += Math.max(
                    dp[neighbor][0] + Math.abs(r[node] - l[neighbor]),
                    dp[neighbor][1] + Math.abs(r[node] - r[neighbor]));
            }
        }
    }
}
