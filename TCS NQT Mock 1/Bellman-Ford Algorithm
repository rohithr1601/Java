QUESTION 01
bookmark_border
Bellman-Ford Algorithm

Given a graph and a source vertex src(0) in graph, find shortest paths from src to all vertices in the given graph. The graph may contain negative weight edges. 

If the graph contains a negative cycle, print -1.

If there is no path to a destination, print -1 there.



Input Format:

First line - n and m, the number of nodes and edges

Then there are m lines each containing u, v, and w.

u and v are the nodes and w is the weight of the edge.



Output Format:

Print shortest paths from src to all vertices in the given graph. If there is no path to a destination, print -1 there. If the graph contains a negative cycle, print -1.





Sample Input:

5 8

0 1 -1

0 2 4

1 2 3

1 3 2

1 4 2

3 2 5

3 1 1

4 3 -3



Sample Output:

0 -1 2 -2 1



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
public class Main 
{
    static void shortest(int n, int m, int[][] a) 
    {
        int[] d = new int[n];
        for (int i = 0; i < n; i++) 
        {
            d[i] = Integer.MAX_VALUE;
        }
        d[0] = 0;
        for (int i = 1; i < n; i++) 
        {
            for (int j = 0; j < m; j++) 
            {
                int u = a[j][0];
                int v = a[j][1];
                int w = a[j][2];
                if (d[u] != Integer.MAX_VALUE && d[u] + w < d[v]) 
                {
                    d[v] = d[u] + w;
                }
            }
        }
        for (int i = 0; i < m; i++) 
        {
            int u = a[i][0];
            int v = a[i][1];
            int w = a[i][2];
            if (d[u] != Integer.MAX_VALUE && d[u] + w < d[v]) 
            {
                System.out.println(-1);
                return;
            }
        }
        for (int i = 0; i < n; i++) 
        {
            if (d[i] == Integer.MAX_VALUE) 
            {
                System.out.print(-1 + " ");
            } 
            else 
            {
                System.out.print(d[i] + " ");
            }
        }
    }
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] a = new int[m][3];
        for (int i = 0; i < m; i++) 
        {
            a[i][0] = sc.nextInt();
            a[i][1] = sc.nextInt();
            a[i][2] = sc.nextInt();
        }
        shortest(n, m, a);
    }
}
