QUESTION 02
bookmark_border
There are N people numbered from 1 to N, standing in a queue to withdraw money from an ATM. The queue is formed in ascending order of their number. The person numbered i wants to withdraw amount Ai. The maximum amount a person can withdraw at a time is X. If they need more money than X, they need to go stand at the end of the queue and wait for their turn in line. A person leaves the queue once they have withdrawn the required amount.

You need to find the order in which all the people leave the queue.



Input

The first line of the input gives the number of test cases T. T test cases follow.

The first line of each test case gives two space-separated integers: the number of people standing in the queue, N and the maximum amount X that can be withdrawn in one turn.

The next line contains N space-separated integers Ai.



Output

For each test case, output one line containing, where x is the test case number (starting from 1) and y is the space-separated list of integers that denote the order in which the people leave the queue.

Limits

1 ≤ T ≤ 100.

1 ≤ N ≤ 105

1 ≤ Ai ≤ 109.

1 ≤ X ≤ 109.

 

Input:

2

3 3

2 7 4

5 6

9 10 4 7 2



Output:

1 3 2

3 5 1 2 4


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



import java.util.*;
public class Main 
{
    public static void ATM(int n, int x, int[] a) 
    {
        Queue<Integer> q = new LinkedList<>();
        Queue<Integer> r = new LinkedList<>();
        for (int i = 0; i < n; i++) 
        {
            q.add(i + 1);
        }
        while (!q.isEmpty()) {
            int p = q.poll();
            int am = a[p - 1];
            if (am <= x) 
            {
                r.add(p);
            } 
            else 
            {
                a[p - 1] -= x; 
                q.add(p);
            }
        }
        while (!r.isEmpty()) 
        {
            System.out.print(r.poll() + " ");
        }
        System.out.println();
    }
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) 
        {
            int n = sc.nextInt();
            int x = sc.nextInt();
            int[] a = new int[n];
            for (int j = 0; j < n; j++) 
            {
                a[j] = sc.nextInt();
            }
            ATM(n, x, a);
        }
    }
}
